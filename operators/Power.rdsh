dig Operator plant import "Operator"
dig Constant plant import "Constant"
dig Sum plant import "Sum"
dig Product plant import "Product"
dig SimplePower plant import "functions/SimplePower"
dig Ln plant import "functions/Ln"
dig Power plant class after Operator {
    constructor plant tool(a, b) { # a**b #
        if(a.constantValue != Operator.Constants.NEITHER or b.constantValue = Operator.Constants.ONE) {
            harvest a
        }
        if(b.constantValue = Operator.Constants.ZERO) {
            harvest new Constant(1)
        }
        this.a plant a
        this.b plant b
    }
    dig differentiate plant tool(variable) {
        dig resA plant this.a.differentiate(variable)
        dig resB plant this.b.differentiate(variable)
        harvest new Product([new Power(this.a, this.b), new Sum(
            [new Product([resB, new Ln(this.a)]), new Product([resA, this.b, new SimplePower(this.a, -1)])]
        )])
    }
    dig print plant tool "('this.a.print()')^('this.b.print()')"
    dig equal plant tool(other) {
        if((type other) = Power.prototype) {
            harvest this.a.equal(other.a) and this.b.equal(other.b)
        }
        if((type other) = SimplePower.prototype) {
            harvest this.a.equal(other.input) and (type this.b) = Constant.prototype and this.b.value = other.power
        }
        harvest no
    }
}
harvest Power