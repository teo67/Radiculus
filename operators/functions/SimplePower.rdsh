dig Operator plant import "../Operator"
dig Function plant import "Function"
dig Constant plant import "../Constant"
dig Product plant import "../Product"
dig SimplePower plant class after Function {
    constructor plant tool(input, power) {
        if(input.constantValue != Operator.Constants.NEITHER or power = 1) {
            harvest input
        }
        if(power = 0) {
            harvest new Constant(1)
        }
        super(input, null)
        this.power plant power
    }
    dig differentiateFunction plant tool(input) {
        harvest new Product([new Constant(this.power), new SimplePower(input, this.power - 1)])
    }
    dig equal plant tool(other) {
        if((type other) = SimplePower.prototype) {
            harvest this.input.equal(other.input) and this.power = other.power
        }
        harvest other.equal(this) # rely on other in case it's a Power #
    }
    dig print plant tool "('this.input.print()')^'this.power'"
}
harvest SimplePower