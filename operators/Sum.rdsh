dig Operator plant import "Operator"
dig Constant plant import "Constant"
dig Sum plant class after Operator {
    constructor plant tool(terms) {
        this.terms plant []
        each term of terms {
            if(term.constantValue != Operator.Constants.ZERO) {
                if((type term) = Sum.prototype) {
                    each termTerm of term.terms {
                        arr.push(termTerm)
                    }
                } else {
                    this.terms.push(term)
                }
            }
        }
        if(this.terms.length = 0) {
            harvest new Constant(0)
        }
        if(this.terms.length = 1) {
            harvest this.terms.first
        }
    }
    dig private addTerm plant tool(adding) {
        for(dig i plant 0, i < this.terms.length, i++) {
            
        }
    }
    dig differentiate plant tool(variable) {
        dig derivs plant []
        each term of this.terms {
            derivs.push(term.differentiate(variable))
        }
        harvest new Sum(derivs)
    }
    dig print plant tool {
        dig returning plant ""
        for(dig i plant 0, i < this.terms.length, i++) {
            if(i > 0) {
                returning += " + "
            }
            returning += this.terms[i].print()
        }
        harvest returning
    }
    dig equal plant tool(other) {
        if((type other) != Sum.prototype) {
            harvest no
        }
        harvest compareArrayHelper(this.terms, other.terms)
    }
}
harvest Sum